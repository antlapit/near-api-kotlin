package antlapit.near.api.providers.model.transaction

import antlapit.near.api.providers.model.primitives.*

data class FinalExecutionOutcome(
    /// Execution status. Contains the result in case of successful execution.
    val status: FinalExecutionStatus,
    /// Signed Transaction
    val transaction: SignedTransactionView,
    /// The execution outcome of the signed transaction.
    val transactionOutcome: ExecutionOutcomeWithIdView,
    /// The execution outcome of receipts.
    val receiptsOutcome: List<ExecutionOutcomeWithIdView> = emptyList(),
)

data class ExecutionOutcomeWithIdView(
    val proof: MerklePath,
    val blockHash: CryptoHash,
    val id: CryptoHash,
    val outcome: ExecutionOutcomeView
)

data class ExecutionOutcomeView(
    /// Logs from this transaction or receipt.
    val logs: List<String> = emptyList(),
    /// Receipt IDs generated by this transaction or receipt.
    val receiptIds: List<CryptoHash> = emptyList(),
    /// The amount of the gas burnt by the given transaction or receipt.
    val gasBurnt: Gas,
    /// The amount of tokens burnt corresponding to the burnt gas amount.
    /// This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because
    /// the prepaid gas price might be lower than the actual gas price and it creates a deficit.
    val tokensBurnt: Balance,
    /// The id of the account on which the execution happens. For transaction this is signerId,
    /// for receipt this is receiverId.
    val executorId: AccountId,
    /// Execution status. Contains the result in case of successful execution.
    val status: ExecutionStatus,
    /// Execution metadata, versioned
    val metadata: ExecutionMetadataView
)


data class MerklePathItem(
    val hash: MerkleHash,
    val direction: Direction,
)

typealias MerklePath = List<MerklePathItem>

enum class Direction {
    Left,
    Right
}

data class CostGasUsed(
    val costCategory: String,
    val cost: String,
    val gasUsed: Gas,
)

data class ExecutionMetadataView(
    val version: Int,
    val gasProfile: List<CostGasUsed>?
)
